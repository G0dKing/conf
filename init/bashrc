# ubuntu || ~/.bashrc || 7.2.24
#------------------------------
#------------------------------

# Setup
[[ $- != *i* ]]
export g0dking=$HOME/g0dking

setup_dns() {
    local file="/etc/resolv.conf"
    local domains=(
        "1.1.1.1"
        "1.0.0.1"
        "8.8.8.8"
        "8.8.4.4"
    )

    if [[ ! -f "$file" ]]; then
        sudo touch $file
    fi

    for dns in "${domains[@]}"; do
        if ! grep -q "nameserver $dns" "$file"; then
            echo "nameserver ${dns}" | sudo tee -a "$file" >/dev/null
        fi
    done
}

setup_dns

# Network Variables
export pdanet_host_ip=192.168.49.232
export pdanet_gateway=192.168.49.1
export pdanet_proxy_port=8000
export pdanet_proxy="${pdanet_gateway}:${pdanet_proxy_port}"

# List Users
list_users() {
    awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd
}

# Initialize Environment
init_env() {
# Set Vars
    local is_wsl=0
    local dirs=(
        "$g0dking/tools"
        "$g0dking/init"
        "$g0dking/init/wsl"
    )
# Check if WSL
    if grep -qEi '(Microsoft|WSL)' /proc/version; then
        is_wsl=1
    fi
# Source Functions
    for dir in "${dirs[@]}"; do
        if [ -d "$dir" ]; then
            for file in "$dir"/*.{sh,conf,config}; do
                [ -r "$file" ] && [ -f "$file" ] && . "$file"
            done
        elif [ "$dir" == "$g0dking/init/wsl" ] && [ "$is_wsl" -eq 1 ]; then
            for file in "$dir"/*.{sh,conf}; do
                [ -r "$file" ] && [ -f "$file" ] && . "$file"
            done
        fi
    done
}
init_env

# Check Initialization Status
chk_init() {
    if [[ "$complete" -ne 1 ]]; then
        if [[ -f "$src" ]]; then
            source $src
        else
            echo "Error: The current Shell configuration is not compatible with
this function. To initialize, clone 'https://github.com/G0dKing/init.git' to
your home directory, rename 'init' to 'g0dking', then reload the shell."
            exit 1
        fi
    fi
}

# Load Secrets
env=$HOME/.env
if [[ -f "$env" ]]; then
    set -a; source "$env"; set +a
fi

# GitHub
clone() {
    local repo=$1
    local url="https://github.com"
    local name="g0dking"
    local cmd="git clone "$url"/"$name"/"$repo".git"
    exec "$cmd"
}

push() {
    local default="main"
    local branch=$(1:-${default})
    local username="g0dking"
    local password=$GH_TOKEN
    local remote_url=$(git config --get remote.origin.url)
    local auth_url="https://${username}:${password}@${remote_url#https://}"
    local cmd="git push origin ${branch}"
    local cmd2="git remote set-url origin ${auth_url}"

    exec "$cmd2" || error "Failed to set the remote URL." && return 1

    if ! exec "$cmd" >/dev/null; then
        error " Could not push to remote repository."
        return 1
    else
        echo "Successfully pushed local changes to remote branch 'origin $branch'."
    fi
}

# Node Version Manager
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Docker
DOCKER_DISTRO="Ubuntu"
DOCKER_DIR=/mnt/wsl/shared-docker
DOCKER_SOCK="$DOCKER_DIR/docker.sock"
export DOCKER_HOST="unix://$DOCKER_SOCK"
if [ ! -S "$DOCKER_SOCK" ]; then
     mkdir -pm o=,ug=rwx "$DOCKER_DIR"
     chgrp docker "$DOCKER_DIR"
     /mnt/c/Windows/System32/wsl.exe -d $DOCKER_DISTRO sh -c "nohup sudo -b dockerd < /dev/null > $DOCKER_DIR/dockerd.log 2>&1"
fi

# Rust
. "$HOME/.cargo/env"

# Bun
export BUN_INSTALL="$HOME/.bun"
export PATH=$BUN_INSTALL/bin:$PATH

__conda_setup="$('/home/seed/.conda/miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/seed/.conda/miniconda/etc/profile.d/conda.sh" ]; then
        . "/home/seed/.conda/miniconda/etc/profile.d/conda.sh"
    else
        export PATH="/home/seed/.conda/miniconda/bin:$PATH"
    fi
fi
unset __conda_setup

